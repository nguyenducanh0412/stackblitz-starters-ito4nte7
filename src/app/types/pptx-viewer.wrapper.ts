export class PptxViewer {
  currentSlide = 1;
  totalSlides = 0;
  container: any = null;
  $container: any = null;

  constructor() {
    if (typeof (window as any).jQuery === "undefined") {
      throw new Error("jQuery is not loaded");
    }
    if (typeof (window as any).jQuery.fn.pptxToHtml !== "function") {
      throw new Error("pptxToHtml plugin is not loaded");
    }
  }

  renderPptx(options: {
    container: HTMLElement;
    file: File;
    onRender?: () => void;
    onError?: (error: any) => void;
  }): void {
    const { container, file, onRender, onError } = options;

    // Validate file
    console.log("üîç Validating file...");
    console.log("File name:", file.name);
    console.log("File size:", file.size, "bytes");
    console.log("File type:", file.type);
    debugger;
    if (file.size === 0) {
      const error = "File is empty (0 bytes)";
      console.error("‚ùå", error);
      if (onError) onError(error);
      return;
    }

    if (file.size < 100) {
      console.warn("‚ö†Ô∏è File seems too small for a PPTX");
    }

    this.container = container;
    const $ = (window as any).jQuery;
    this.$container = $(container);

    console.log("üìÑ Creating Object URL...");
    const fileUrl = URL.createObjectURL(file);
    console.log("üîó Object URL:", fileUrl);

    // Test: C√≥ th·ªÉ fetch URL kh√¥ng
    fetch(fileUrl)
      .then((response) => {
        console.log("‚úÖ File URL is accessible");
        console.log("Response status:", response.status);
        console.log("Content-Type:", response.headers.get("content-type"));
        return response.blob();
      })
      .then((testBlob) => {
        console.log("‚úÖ Blob size from URL:", testBlob.size);
      })
      .catch((err) => {
        console.error("‚ùå Cannot access file URL:", err);
      });

    console.log("üé® Initializing pptxToHtml...");

    try {
      this.$container.pptxToHtml({
        pptxFileUrl: fileUrl,
        slideMode: true,
        keyBoardShortCut: false,
        slideModeConfig: {
          first: 1,
          nav: false,
          navTxtColor: "#000",
          navCurrentTxtColor: "#fff",
          showSlideNum: true,
          showTotalSlideNum: true,
          autoSlide: false,
          loop: false,
          background: "#f5f5f5",
          transition: "fade",
          transitionTime: 0.3,
        },
      });

      console.log("‚úÖ pptxToHtml initialized");

      // Ki·ªÉm tra sau nhi·ªÅu kho·∫£ng th·ªùi gian
      const checkIntervals = [500, 1000, 2000, 3000, 5000];

      checkIntervals.forEach((interval) => {
        setTimeout(() => {
          const slides = this.$container.find(".slide");
          console.log(`‚è±Ô∏è After ${interval}ms: Found ${slides.length} slides`);

          // Log HTML ƒë·ªÉ xem c√≥ g√¨ ƒë∆∞·ª£c render kh√¥ng
          if (slides.length === 0) {
            console.log(
              "üìù Container HTML:",
              this.$container.html().substring(0, 500)
            );
          }

          if (slides.length > 0 && this.totalSlides === 0) {
            this.totalSlides = slides.length;
            console.log("‚úÖ PPTX rendered successfully!");
            console.log("üìä Total slides:", this.totalSlides);

            // Cleanup URL
            URL.revokeObjectURL(fileUrl);

            if (onRender) {
              onRender();
            }
          }
        }, interval);
      });

      // Timeout cu·ªëi c√πng - n·∫øu v·∫´n kh√¥ng c√≥ slides
      setTimeout(() => {
        if (this.totalSlides === 0) {
          const error = "No slides rendered after 5 seconds";
          console.error("‚ùå", error);
          console.log("üîç Final container content:", this.$container.html());

          // Revoke URL ƒë·ªÉ tr√°nh memory leak
          URL.revokeObjectURL(fileUrl);

          if (onError) {
            onError(error);
          }
        }
      }, 5000);
    } catch (error) {
      console.error("‚ùå Error in pptxToHtml:", error);
      URL.revokeObjectURL(fileUrl);
      if (onError) {
        onError(error);
      }
    }
  }

  // ... rest of the methods
  nextSlide(): boolean {
    if (this.$container && this.currentSlide < this.totalSlides) {
      this.$container.trigger("nextSlide");
      this.currentSlide++;
      console.log(
        "‚û°Ô∏è Current slide:",
        this.currentSlide,
        "/",
        this.totalSlides
      );
      return true;
    }
    console.warn("‚ö†Ô∏è Cannot go to next slide");
    return false;
  }

  prevSlide(): boolean {
    if (this.$container && this.currentSlide > 1) {
      this.$container.trigger("prevSlide");
      this.currentSlide--;
      console.log(
        "‚¨ÖÔ∏è Current slide:",
        this.currentSlide,
        "/",
        this.totalSlides
      );
      return true;
    }
    console.warn("‚ö†Ô∏è Cannot go to previous slide");
    return false;
  }

  goToSlide(slideNumber: number): boolean {
    if (
      this.$container &&
      slideNumber >= 1 &&
      slideNumber <= this.totalSlides
    ) {
      this.$container.trigger("gotoSlide", [slideNumber]);
      this.currentSlide = slideNumber;
      console.log("üéØ Jumped to slide:", slideNumber, "/", this.totalSlides);
      return true;
    }
    console.warn("‚ö†Ô∏è Cannot go to slide", slideNumber);
    return false;
  }

  getCurrentSlide(): number {
    return this.currentSlide;
  }

  getTotalSlides(): number {
    return this.totalSlides;
  }

  destroy(): void {
    if (this.$container) {
      this.$container.empty();
      this.$container = null;
      this.container = null;
      this.currentSlide = 1;
      this.totalSlides = 0;
      console.log("üóëÔ∏è PptxViewer destroyed");
    }
  }
}
